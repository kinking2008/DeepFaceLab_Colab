@staticmethod
    def DRLNFlow(chs=32):
        
        def BasicBlock(dim, kernel_size=3, strides=1, dilation=1):
            
            def func(x):
                x = Conv2D(dim, kernel_size=kernel_size, strides=strides, padding='same', dilation_rate=dilation)(x)
                x = ReLU()(x)                
                return x
            return func
            
        def BasicBlockSig(dim, kernel_size=3, strides=1):            
            def func(x):
                return Conv2D(dim, kernel_size=kernel_size, strides=strides, padding='same', activation='sigmoid')(x)            
            return func
            
        def ResidualBlock(dim):
            def func(inp):
                x = Conv2D(dim, kernel_size=3, padding='same')(inp)
                x = ReLU()(x)
                x = Conv2D(dim, kernel_size=3, padding='same')(x)
                x = Add()([x, inp])
                x = ReLU()(x)
                return x
                
            return func
            
        def CALayer(channel, reduction=16):
            def func(x):
                y = AveragePooling2D(1)(x)     
           
                c1 = BasicBlock(channel // reduction,  3, 1, 3) (y)
                c2 = BasicBlock(channel // reduction,  3, 1, 5) (y)
                c3 = BasicBlock(channel // reduction,  3, 1, 7) (y)
                c_out = Concatenate(axis=-1)([c1,c2,c3])
                y = BasicBlockSig( channel, 3, 1)(c_out)
                return Multiply()([x,y])
            return func
            
        def Block(dim):            
            def func(x):
                c0 = x                
                r1 = ResidualBlock(dim)(c0)
                c1 = Concatenate(axis=-1)([c0, r1])                
                r2 = ResidualBlock(dim*2)(c1)
                c2 = Concatenate(axis=-1)([c1, r2])                
                r3 = ResidualBlock(dim*4)(c2)
                c3 = Concatenate(axis=-1)([c2, r3])                
                g = BasicBlock(dim, 1, 1)(c3)
                return CALayer(dim)(g)               
            return func

        def func(x):            
            c0 = o0 = x = Conv2D(chs, kernel_size=3, strides=1, padding='same')(x)
            
            cx = [x]
            ox = [x]            
            ax = [x]
            
            for i in range(1, 10):
                cx += [ Concatenate(axis=-1)([ cx[-1], 
                                               Block(chs)(ox[-1]) ]) ]
                ox += [ BasicBlock(chs)(cx[-1]) ]
            
                if i in [3,6,9,12,16,20]:
                    ax += [ Add()([ ox[i], ax[-1] ])  ]
                 
            x = Add()( [ ax[-1], x ])
            
            #SubpixelUpscaler()(ReLU()(Conv2D(chs*4, kernel_size=3, strides=1, padding='same')(x) ))

            return Conv2D(3, kernel_size=3, strides=1, padding='same')(x)
            
        return func 